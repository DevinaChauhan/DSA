typedef struct {
    int* stack1;
    int* stack2;
    int top1;
    int top2;
} MyQueue;
,yQueueCreate() {
    MyQueue* obj = (MyQueue*)malloc(sizeof(MyQueue));
    obj->stack1 = (int*)malloc(1000 * sizeof(int));
    obj->stack2 = (int*)malloc(1000 * sizeof(int));
    obj->top1 = -1;
    obj->top2 = -1;
    return obj;
}

void myQueuePush(MyQueue* obj, int x) {
    obj->stack1[++obj->top1] = x;
}

void transferStack1ToStack2(MyQueue* obj) {
    while (obj->top1 > -1) {
        obj->stack2[++obj->top2] = obj->stack1[obj->top1--];
    }
}

int myQueuePop(MyQueue* obj) {
    if (obj->top2 == -1) {
        transferStack1ToStack2(obj);
    }
    return obj->stack2[obj->top2--];
}

int myQueuePeek(MyQueue* obj) {
    if (obj->top2 == -1) {
        transferStack1ToStack2(obj);
    }
    return obj->stack2[obj->top2];
}

bool myQueueEmpty(MyQueue* obj) {
    return (obj->top1 == -1 && obj->top2 == -1);
}

void myQueueFree(MyQueue* obj) {
    free(obj->stack1);
    free(obj->stack2);
    free(obj);
}
