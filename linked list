
 #include <stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
    
}*first=NULL;

void create(int A[],int n)
{
    struct node *last,*t;
    first=(struct node *) malloc (sizeof(struct node));
    
    first->data=A[0];
    first->next=NULL;
    last=first;
    
    
    for(int i=1;i<n;i++)
    {     t=(struct node *) malloc (sizeof(struct node));
        t->data=A[i];
        last->next =t;
        last=t;
        
        
    }
    
    
}

void Display(struct node *p)
{
 while(p!=NULL)
 {
 printf("%d ",p->data);
 p=p->next;
 }
}


 int count(struct node *p)
{
    int l=0;
    while(p)
    {
        l++;
        p=p->next;
    }
    return l;
}
 
void insert(struct node *p,int index,int x)
{
    struct node *t;
    if(index<0 || index>count(p))
    {
        return ;
    }
    
t=(struct node *) malloc (sizeof(struct node));
t->data=x;
    if(index==0)
    {
        t->next=first ;
        first=t;
        
    }
    else
    {
        for(int i=0;i<index-1;i++)
        {
            p=p->next;
        }
        t->next=p->next;
        p->next=t;
    }
}


int delete(struct node *p,int index)
{
    struct node *q=NULL;
    int x=-1;
    if(index<0 || index>count(p))
    {
        return -1;
    }
    
    if(index ==1)
    {   q=first;
        x=first->data;
        first=first->next;
        free(q);
        return x;
        
    }
    
    
    
    


else
{
    for(int i=0;i<index-1;i++)
    {
        q=p;
        p=p->next;
    }
    q->next=p->next;
    x=p->data;
    free(p);
    return(x);
}
}
int rsum(struct node *p)
{
    int s=0;
    while(p)
    {
        s+=p->data;
        p=p->next;
        
        
    }
    return s;
}

struct node * search(struct node *p,int key)
{
    if(p==NULL)
    {
        return NULL;
        
        if(key==p->data)
        {
            return (p);
          
        }
        return search(p->next,key);
    }
}

int max(struct node *p)
{
    int max=-9999;
    while(p)
    {
        if(p->data>max)
        {
            max=p->data;
            p=p->next;
            
            
        }
        
    }
    return max;
    
}

 int main() {
 int A[]={10,20,30,40,50};
 create(A,5);
 insert(first,0,5);
Display(first);
delete(first ,3);

 return 0;
 }
 
 
